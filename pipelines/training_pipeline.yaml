# PIPELINE DEFINITION
# Name: news-clf-model-trainer
# Description: Pipeline to fine-tune a pre-trained BERT model for news classification
# Inputs:
#    baseline: float
#    batch_size: int [Default: 32.0]
#    bert_preset: str [Default: 'bert_tiny_en_uncased']
#    dataset_name: str
#    dataset_split_seed: int [Default: 42.0]
#    debug_batch_count: int
#    early_stopping_min_delta: float [Default: 0.001]
#    early_stopping_patience: int [Default: 5.0]
#    epochs: int [Default: 20.0]
#    experiment_name: str
#    label_column_name: str
#    learning_rate: float [Default: 5e-05]
#    registered_model_name: str
#    text_column_name: str
#    val_data_fraction: int [Default: 0.2]
components:
  comp-evaluate-model:
    executorLabel: exec-evaluate-model
    inputDefinitions:
      artifacts:
        saved_model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
        test_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        batch_size:
          parameterType: NUMBER_INTEGER
        debug_batch_count:
          parameterType: NUMBER_INTEGER
        label_col:
          parameterType: STRING
        mlflow_run_id:
          parameterType: STRING
        text_col:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        metrics:
          artifactType:
            schemaTitle: system.Metrics
            schemaVersion: 0.0.1
  comp-finetune-bert:
    executorLabel: exec-finetune-bert
    inputDefinitions:
      artifacts:
        train_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        val_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        batch_size:
          parameterType: NUMBER_INTEGER
        debug_batch_count:
          parameterType: NUMBER_INTEGER
        epochs:
          parameterType: NUMBER_INTEGER
        label_col:
          parameterType: STRING
        lr:
          parameterType: NUMBER_DOUBLE
        min_delta:
          parameterType: NUMBER_DOUBLE
        mlflow_run_id:
          parameterType: STRING
        patience:
          parameterType: NUMBER_INTEGER
        preset:
          parameterType: STRING
        text_col:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        keras_model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
        training_curves:
          artifactType:
            schemaTitle: system.HTML
            schemaVersion: 0.0.1
  comp-get-run-id:
    executorLabel: exec-get-run-id
    inputDefinitions:
      parameters:
        experiment_name:
          parameterType: STRING
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRING
  comp-load-hf-dataset:
    executorLabel: exec-load-hf-dataset
    inputDefinitions:
      parameters:
        mlflow_run_id:
          parameterType: STRING
        name:
          parameterType: STRING
        seed:
          parameterType: NUMBER_INTEGER
        val_fraction:
          parameterType: NUMBER_INTEGER
    outputDefinitions:
      artifacts:
        preview:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        test_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        train_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        val_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-validate-model:
    executorLabel: exec-validate-model
    inputDefinitions:
      parameters:
        baseline:
          parameterType: NUMBER_DOUBLE
        experiment_name:
          parameterType: STRING
        mlflow_run_id:
          parameterType: STRING
        registered_model_name:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-evaluate-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - evaluate_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef evaluate_model(\n    mlflow_run_id: str,\n    batch_size: int,\n\
          \    text_col: str,\n    label_col: str,\n    debug_batch_count: int,\n\
          \    test_dataset: Input[Dataset],\n    saved_model: Input[Model],\n   \
          \ metrics: Output[Metrics]\n):\n    import os\n    from datasets import\
          \ load_from_disk\n    import tensorflow as tf\n    import mlflow\n\n   \
          \ # shift [1,2,3,4] -> [0,1,2,3]\n    def adjust_labels(x, y):\n       \
          \ return x, y - 1\n\n    test_split = load_from_disk(test_dataset.path)\n\
          \    tf_test_dataset = test_split.to_tf_dataset(\n        columns=[text_col],\n\
          \        label_cols=[label_col],\n        batch_size=batch_size,\n     \
          \   shuffle=True\n    )\n    tf_test_dataset = tf_test_dataset.map(adjust_labels)\n\
          \n    if debug_batch_count is not None:\n        tf_test_dataset = tf_test_dataset.take(debug_batch_count)\n\
          \n    model_filepath = f\"{saved_model.path}/model.keras\"\n    reloaded_model\
          \ = tf.keras.models.load_model(model_filepath)\n    loss, accuracy = reloaded_model.evaluate(tf_test_dataset)\n\
          \    metrics.log_metric(\"loss/test\", float(loss))\n    metrics.log_metric(\"\
          sparse_categorical_accuracy/test\", float(accuracy))\n\n    # Log mlflow\
          \ experiments\n    os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = \"/etc/gcs/key.json\"\
          \n    tracking_uri = os.environ[\"MLFLOW_TRACKING_URI\"]\n    mlflow.set_tracking_uri(tracking_uri)\n\
          \    with mlflow.start_run(run_id=mlflow_run_id):\n        mlflow.log_metrics({\n\
          \            \"loss/test\": loss, \n            \"sparse_categorical_accuracy/test\"\
          : accuracy\n        })\n\n"
        image: docker.io/prashalruchiranga/news-classifier:components-v1.2
    exec-finetune-bert:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - finetune_bert
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef finetune_bert(\n    mlflow_run_id: str,\n    preset: str,\n \
          \   batch_size: int,\n    text_col: str,\n    label_col: str,\n    lr: float,\n\
          \    epochs: int,\n    min_delta: float,\n    patience: int,\n    debug_batch_count:\
          \ int,\n    train_dataset: Input[Dataset],\n    val_dataset: Input[Dataset],\n\
          \    training_curves: Output[HTML],\n    keras_model: Output[Model]\n  \
          \  ):\n    import os\n    import base64\n    from io import BytesIO\n  \
          \  import matplotlib.pyplot as plt\n    from datasets import load_from_disk\n\
          \    from keras_hub.models import BertTextClassifier\n    from tensorflow.keras.losses\
          \ import SparseCategoricalCrossentropy\n    from tensorflow.keras.metrics\
          \ import SparseCategoricalAccuracy\n    from tensorflow.keras.optimizers\
          \ import Adam\n    from tensorflow.keras.callbacks import EarlyStopping\n\
          \    import mlflow\n\n    # shift [1,2,3,4] -> [0,1,2,3]\n    def adjust_labels(x,\
          \ y):\n        return x, y - 1\n\n    train_split = load_from_disk(train_dataset.path)\n\
          \    val_split = load_from_disk(val_dataset.path)\n    tf_train_dataset\
          \ = train_split.to_tf_dataset(\n        columns=[text_col],\n        label_cols=[label_col],\n\
          \        batch_size=batch_size,\n        shuffle=True\n    )\n    tf_val_dataset\
          \ = val_split.to_tf_dataset(\n        columns=[text_col],\n        label_cols=[label_col],\n\
          \        batch_size=batch_size,\n        shuffle=True\n    )\n    tf_train_dataset\
          \ = tf_train_dataset.map(adjust_labels)\n    tf_val_dataset = tf_val_dataset.map(adjust_labels)\n\
          \n    if debug_batch_count is not None:\n        tf_train_dataset = tf_train_dataset.take(debug_batch_count)\n\
          \        tf_val_dataset = tf_val_dataset.take(debug_batch_count)\n\n   \
          \ number_of_classes = len(set(train_split[label_col]))\n    classifier =\
          \ BertTextClassifier.from_preset(\n        preset=preset,\n        num_classes=number_of_classes,\n\
          \    )\n    classifier.compile(\n        loss=SparseCategoricalCrossentropy(name=\"\
          sparse_categorical_loss\", from_logits=True),\n        metrics = [SparseCategoricalAccuracy(name=\"\
          sparse_categorical_accuracy\")],\n        optimizer=Adam(lr)\n    )\n  \
          \  assert classifier.backbone.trainable == True\n\n    early_stopping =\
          \ EarlyStopping(\n        min_delta=min_delta,\n        patience=patience,\n\
          \        verbose=True,\n        restore_best_weights=True,\n    )\n    history\
          \ = classifier.fit(\n        x=tf_train_dataset,\n        epochs=epochs,\n\
          \        validation_data=tf_val_dataset,\n        callbacks=[early_stopping]\n\
          \    )\n\n    # Visualize training and validation curves using an HTML artifact\n\
          \    history_dict = history.history\n    acc = history_dict[\"sparse_categorical_accuracy\"\
          ]\n    val_acc = history_dict[\"val_sparse_categorical_accuracy\"]\n   \
          \ loss = history_dict['loss']\n    val_loss = history_dict['val_loss']\n\
          \n    epochs_completed = range(1, len(acc) + 1)\n    fig = plt.figure(figsize=(10,\
          \ 10))\n    fig.tight_layout()\n\n    plt.subplot(2, 1, 1)\n    plt.plot(epochs_completed,\
          \ loss, 'r', label='Training loss')\n    plt.plot(epochs_completed, val_loss,\
          \ 'b', label='Validation loss')\n    plt.title('Training and validation\
          \ loss')\n    plt.xlabel('Epochs')\n    plt.ylabel('Loss')\n    plt.legend()\n\
          \n    plt.subplot(2, 1, 2)\n    plt.plot(epochs_completed, acc, 'r', label='Training\
          \ acc')\n    plt.plot(epochs_completed, val_acc, 'b', label='Validation\
          \ acc')\n    plt.title('Training and validation accuracy')\n    plt.xlabel('Epochs')\n\
          \    plt.ylabel('Accuracy')\n    plt.legend(loc='lower right')\n\n    buffer\
          \ = BytesIO()\n    plt.savefig(buffer, format=\"png\")\n    buffer.seek(0)\n\
          \    img_base64 = base64.b64encode(buffer.read()).decode(\"utf-8\")\n  \
          \  html = f\"\"\"\n    <!DOCTYPE html>\n    <html>\n    <body>\n       \
          \ <img src=\"data:image/png;base64,{img_base64}\" alt=\"Training curves\"\
          >\n    </body>\n    </html>\n    \"\"\"\n    with open(training_curves.path,\
          \ \"w\") as f:\n        f.write(html)\n\n    # Save fine-tuned model\n \
          \   os.makedirs(keras_model.path, exist_ok=True)\n    model_filepath = os.path.join(keras_model.path,\
          \ \"model.keras\")\n    classifier.save(model_filepath)\n\n    # Log mlflow\
          \ experiments\n    os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = \"/etc/gcs/key.json\"\
          \n    # Set the standard timeout for transfer operations in seconds\n  \
          \  os.environ[\"MLFLOW_ARTIFACT_UPLOAD_DOWNLOAD_TIMEOUT\"] = \"600\"\n \
          \   tracking_uri = os.environ[\"MLFLOW_TRACKING_URI\"]\n    mlflow.set_tracking_uri(tracking_uri)\n\
          \    with mlflow.start_run(run_id=mlflow_run_id):\n        mlflow.log_params({\n\
          \            \"bert_preset\": preset,\n            \"batch_size\": batch_size,\n\
          \            \"learning_rate\": lr,\n            \"epochs\": epochs,\n \
          \           \"early_stopping_min_delta\": min_delta,\n            \"early_stopping_patience\"\
          : patience,\n            \"debug_batch_count\": debug_batch_count\n    \
          \    })\n        mlflow.log_dict(history_dict, \"history.json\")\n     \
          \   mlflow.log_figure(fig, \"training_curves.png\")\n        for epoch in\
          \ range(len(acc)):\n            mlflow.log_metric(\"loss/train\", loss[epoch],\
          \ step=epoch+1)\n            mlflow.log_metric(\"loss/validation\", val_loss[epoch],\
          \ step=epoch+1)\n            mlflow.log_metric(\"sparse_categorical_accuracy/train\"\
          , acc[epoch], step=epoch+1)\n            mlflow.log_metric(\"sparse_categorical_accuracy/validation\"\
          , val_acc[epoch], step=epoch+1)\n\n        for batch_x, batch_y in tf_train_dataset.take(1):\n\
          \            input_example = batch_x.numpy()\n            output_example\
          \ = classifier.predict(input_example)\n        signature = mlflow.models.infer_signature(model_input=input_example,\
          \ model_output=output_example)\n        try:\n            mlflow.tensorflow.log_model(\n\
          \                model=classifier,\n                name=\"keras-model\"\
          ,\n                signature=signature,\n                pip_requirements=\"\
          /app/requirements.txt\"\n            )\n        except ConnectionError:\n\
          \            print(\"Connection aborted. MLflow was unable to upload the\
          \ artifact to GCS within the default timeout.\")\n\n"
        image: docker.io/prashalruchiranga/news-classifier:components-v1.2
    exec-get-run-id:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - get_run_id
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef get_run_id(\n    experiment_name: str\n    ) -> str:\n    import\
          \ os\n    import mlflow\n\n    os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"\
          ] = \"/etc/gcs/key.json\"\n    tracking_uri = os.environ[\"MLFLOW_TRACKING_URI\"\
          ]\n    mlflow.set_tracking_uri(tracking_uri)\n    mlflow.set_experiment(experiment_name)\n\
          \    run = mlflow.start_run()\n    run_id = run.info.run_id\n    mlflow.end_run()\n\
          \    return run_id\n\n"
        image: docker.io/prashalruchiranga/news-classifier:components-v1.2
    exec-load-hf-dataset:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - load_hf_dataset
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef load_hf_dataset(\n    mlflow_run_id: str,\n    name: str,\n \
          \   val_fraction: int, # Fraction of the training dataset to use as the\
          \ validation split\n    seed: int,\n    train_dataset: Output[Dataset],\n\
          \    val_dataset: Output[Dataset],\n    test_dataset: Output[Dataset],\n\
          \    preview: Output[Dataset]\n    ):\n    \"Load a dataset from the Hugging\
          \ Face Hub and save it as a DatasetDict artifact\"\n    import os\n    import\
          \ mlflow\n    from datasets import load_dataset\n\n    dataset = load_dataset(name)\n\
          \    # Split train dataset into train split and val split\n    split_dataset\
          \ = dataset[\"train\"].train_test_split(test_size=val_fraction, shuffle=True,\
          \ seed=seed)\n    train_split = split_dataset[\"train\"]\n    val_split\
          \ = split_dataset[\"test\"]\n    # Just take test dataset as test split\n\
          \    test_split = dataset[\"test\"]\n\n    train_split.save_to_disk(train_dataset.path)\n\
          \    val_split.save_to_disk(val_dataset.path)\n    test_split.save_to_disk(test_dataset.path)\n\
          \n    # For preview only\n    df = train_split.to_pandas().head(50)\n  \
          \  df.to_csv(preview.path, index=False)\n\n    # Log mlflow experiments\n\
          \    os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = \"/etc/gcs/key.json\"\
          \n    tracking_uri = os.environ[\"MLFLOW_TRACKING_URI\"]\n    mlflow.set_tracking_uri(tracking_uri)\n\
          \    with mlflow.start_run(run_id=mlflow_run_id):\n        mlflow.log_params({\n\
          \            \"dataset_name\": name,\n            \"val_data_fraction\"\
          : val_fraction,\n            \"dataset_split_seed\": seed\n        })\n\n"
        image: docker.io/prashalruchiranga/news-classifier:components-v1.2
    exec-validate-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - validate_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef validate_model(\n    mlflow_run_id: str,\n    experiment_name:\
          \ str,\n    registered_model_name: str,\n    baseline: float\n):\n    import\
          \ os\n    import mlflow\n\n    os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"\
          ] = \"/etc/gcs/key.json\"\n    tracking_uri = os.environ[\"MLFLOW_TRACKING_URI\"\
          ]\n    client = mlflow.tracking.MlflowClient(tracking_uri=tracking_uri)\n\
          \    run = client.get_run(run_id=mlflow_run_id)\n    metrics = run.data.metrics\n\
          \    test_accuracy = metrics[\"sparse_categorical_accuracy/test\"]\n\n \
          \   # Register the model if accuracy exceeds the baseline\n    if test_accuracy\
          \ >= baseline:\n        mlflow_model_uri = f\"runs:/{mlflow_run_id}/keras-model\"\
          \n        try:\n            client.get_registered_model(registered_model_name)\n\
          \            print(f\"Model '{registered_model_name}' already exists.\"\
          )\n        except mlflow.exceptions.RestException as ex:\n            if\
          \ ex.error_code == \"RESOURCE_DOES_NOT_EXIST\":\n                print(f\"\
          Model '{registered_model_name}' does not exist. Creating new model.\")\n\
          \                client.create_registered_model(registered_model_name)\n\
          \            else:\n                print(\"An error occured: {er}\")\n\
          \        mv = client.create_model_version(registered_model_name, source=mlflow_model_uri,\
          \ run_id=mlflow_run_id)\n        client.set_registered_model_tag(registered_model_name,\
          \ key=\"experiment\", value=experiment_name)\n        client.set_registered_model_alias(registered_model_name,\
          \ alias=\"challenger\", version=mv.version)\n    else:\n        message\
          \ = (\n            \"Model from run {} did not meet the baseline ({}). \"\
          \n            \"It will not be registered.\"\n        )\n        print(message.format(mlflow_run_id,\
          \ baseline))\n\n"
        image: docker.io/prashalruchiranga/news-classifier:components-v1.2
pipelineInfo:
  description: Pipeline to fine-tune a pre-trained BERT model for news classification
  name: news-clf-model-trainer
root:
  dag:
    tasks:
      evaluate-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-evaluate-model
        dependentTasks:
        - finetune-bert
        - get-run-id
        - load-hf-dataset
        inputs:
          artifacts:
            saved_model:
              taskOutputArtifact:
                outputArtifactKey: keras_model
                producerTask: finetune-bert
            test_dataset:
              taskOutputArtifact:
                outputArtifactKey: test_dataset
                producerTask: load-hf-dataset
          parameters:
            batch_size:
              componentInputParameter: batch_size
            debug_batch_count:
              componentInputParameter: debug_batch_count
            label_col:
              componentInputParameter: label_column_name
            mlflow_run_id:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: get-run-id
            text_col:
              componentInputParameter: text_column_name
        taskInfo:
          name: evaluate-model
      finetune-bert:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-finetune-bert
        dependentTasks:
        - get-run-id
        - load-hf-dataset
        inputs:
          artifacts:
            train_dataset:
              taskOutputArtifact:
                outputArtifactKey: train_dataset
                producerTask: load-hf-dataset
            val_dataset:
              taskOutputArtifact:
                outputArtifactKey: val_dataset
                producerTask: load-hf-dataset
          parameters:
            batch_size:
              componentInputParameter: batch_size
            debug_batch_count:
              componentInputParameter: debug_batch_count
            epochs:
              componentInputParameter: epochs
            label_col:
              componentInputParameter: label_column_name
            lr:
              componentInputParameter: learning_rate
            min_delta:
              componentInputParameter: early_stopping_min_delta
            mlflow_run_id:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: get-run-id
            patience:
              componentInputParameter: early_stopping_patience
            preset:
              componentInputParameter: bert_preset
            text_col:
              componentInputParameter: text_column_name
        taskInfo:
          name: finetune-bert
      get-run-id:
        cachingOptions: {}
        componentRef:
          name: comp-get-run-id
        inputs:
          parameters:
            experiment_name:
              componentInputParameter: experiment_name
        taskInfo:
          name: get-run-id
      load-hf-dataset:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-load-hf-dataset
        dependentTasks:
        - get-run-id
        inputs:
          parameters:
            mlflow_run_id:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: get-run-id
            name:
              componentInputParameter: dataset_name
            seed:
              componentInputParameter: dataset_split_seed
            val_fraction:
              componentInputParameter: val_data_fraction
        taskInfo:
          name: load-hf-dataset
      validate-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-validate-model
        dependentTasks:
        - evaluate-model
        - get-run-id
        inputs:
          parameters:
            baseline:
              componentInputParameter: baseline
            experiment_name:
              componentInputParameter: experiment_name
            mlflow_run_id:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: get-run-id
            registered_model_name:
              componentInputParameter: registered_model_name
        taskInfo:
          name: validate-model
  inputDefinitions:
    parameters:
      baseline:
        parameterType: NUMBER_DOUBLE
      batch_size:
        defaultValue: 32.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      bert_preset:
        defaultValue: bert_tiny_en_uncased
        isOptional: true
        parameterType: STRING
      dataset_name:
        parameterType: STRING
      dataset_split_seed:
        defaultValue: 42.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      debug_batch_count:
        isOptional: true
        parameterType: NUMBER_INTEGER
      early_stopping_min_delta:
        defaultValue: 0.001
        isOptional: true
        parameterType: NUMBER_DOUBLE
      early_stopping_patience:
        defaultValue: 5.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      epochs:
        defaultValue: 20.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      experiment_name:
        parameterType: STRING
      label_column_name:
        parameterType: STRING
      learning_rate:
        defaultValue: 5.0e-05
        isOptional: true
        parameterType: NUMBER_DOUBLE
      registered_model_name:
        parameterType: STRING
      text_column_name:
        parameterType: STRING
      val_data_fraction:
        defaultValue: 0.2
        isOptional: true
        parameterType: NUMBER_INTEGER
schemaVersion: 2.1.0
sdkVersion: kfp-2.13.0
---
platforms:
  kubernetes:
    deploymentSpec:
      executors:
        exec-evaluate-model:
          configMapAsEnv:
          - configMapName: mlflow-config
            configMapNameParameter:
              runtimeValue:
                constant: mlflow-config
            keyToEnv:
            - configMapKey: mlflow_tracking_uri
              envVar: MLFLOW_TRACKING_URI
          secretAsVolume:
          - mountPath: /etc/gcs
            optional: false
            secretName: gcs-credentials
            secretNameParameter:
              runtimeValue:
                constant: gcs-credentials
        exec-finetune-bert:
          configMapAsEnv:
          - configMapName: mlflow-config
            configMapNameParameter:
              runtimeValue:
                constant: mlflow-config
            keyToEnv:
            - configMapKey: mlflow_tracking_uri
              envVar: MLFLOW_TRACKING_URI
          secretAsVolume:
          - mountPath: /etc/gcs
            optional: false
            secretName: gcs-credentials
            secretNameParameter:
              runtimeValue:
                constant: gcs-credentials
        exec-get-run-id:
          configMapAsEnv:
          - configMapName: mlflow-config
            configMapNameParameter:
              runtimeValue:
                constant: mlflow-config
            keyToEnv:
            - configMapKey: mlflow_tracking_uri
              envVar: MLFLOW_TRACKING_URI
          secretAsVolume:
          - mountPath: /etc/gcs
            optional: false
            secretName: gcs-credentials
            secretNameParameter:
              runtimeValue:
                constant: gcs-credentials
        exec-load-hf-dataset:
          configMapAsEnv:
          - configMapName: mlflow-config
            configMapNameParameter:
              runtimeValue:
                constant: mlflow-config
            keyToEnv:
            - configMapKey: mlflow_tracking_uri
              envVar: MLFLOW_TRACKING_URI
          secretAsVolume:
          - mountPath: /etc/gcs
            optional: false
            secretName: gcs-credentials
            secretNameParameter:
              runtimeValue:
                constant: gcs-credentials
        exec-validate-model:
          configMapAsEnv:
          - configMapName: mlflow-config
            configMapNameParameter:
              runtimeValue:
                constant: mlflow-config
            keyToEnv:
            - configMapKey: mlflow_tracking_uri
              envVar: MLFLOW_TRACKING_URI
          secretAsVolume:
          - mountPath: /etc/gcs
            optional: false
            secretName: gcs-credentials
            secretNameParameter:
              runtimeValue:
                constant: gcs-credentials
